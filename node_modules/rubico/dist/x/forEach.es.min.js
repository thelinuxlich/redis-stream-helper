/**
 * rubico v1.8.1
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2021 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
const isArray=Array.isArray,objectProto=Object.prototype,nativeObjectToString=objectProto.toString,objectToString=o=>nativeObjectToString.call(o),generatorFunctionTag="[object GeneratorFunction]",isGeneratorFunction=o=>objectToString(o)==generatorFunctionTag,asyncGeneratorFunctionTag="[object AsyncGeneratorFunction]",isAsyncGeneratorFunction=o=>objectToString(o)==asyncGeneratorFunctionTag,isPromise=o=>null!=o&&"function"==typeof o.then,promiseAll=Promise.all.bind(Promise),always=o=>function(){return o},arrayForEach=function(o,t){const n=o.length,r=[];let e=-1;for(;++e<n;){const n=t(o[e]);isPromise(n)&&r.push(n)}return 0==r.length?o:promiseAll(r).then(always(o))},objectForEach=function(o,t){const n=[];for(const r in o){const e=t(o[r]);isPromise(e)&&n.push(e)}return 0==n.length?o:promiseAll(n).then(always(o))},iteratorForEach=function(o,t){const n=[];for(const r of o){const o=t(r);isPromise(o)&&n.push(o)}return 0==n.length?o:promiseAll(n).then(always(o))},asyncIteratorForEach=async function(o,t){const n=[];for await(const r of o){const o=t(r);isPromise(o)&&n.push(o)}return 0==n.length?o:promiseAll(n).then(always(o))},generatorFunctionForEach=(o,t)=>function*(...n){const r=[],e=o(...n);for(const o of e){const n=t(o);isPromise(n)&&r.push(n)}return 0==r.length?e:promiseAll(r).then(always(e))},asyncGeneratorFunctionForEach=(o,t)=>async function*(...n){const r=[],e=o(...n);for await(const o of e){const n=t(o);isPromise(n)&&r.push(n)}return 0==r.length?e:promiseAll(r).then(always(e))},thunkify2=(o,t,n)=>function(){return o(t,n)},reducerForEach=(o,t)=>function(n,r){const e=t(r);return isPromise(e)?e.then((c=o,a=n,s=r,function(){return c(a,s)})):o(n,r);var c,a,s},symbolIterator=Symbol.iterator,symbolAsyncIterator=Symbol.asyncIterator,forEach=o=>function(t){return isArray(t)?arrayForEach(t,o):"function"==typeof t?isGeneratorFunction(t)?generatorFunctionForEach(t,o):isAsyncGeneratorFunction(t)?asyncGeneratorFunctionForEach(t,o):reducerForEach(t,o):null==t?t:"function"==typeof t.forEach?t.forEach(o):"function"==typeof t[symbolIterator]?iteratorForEach(t[symbolIterator](),o):"function"==typeof t[symbolAsyncIterator]?asyncIteratorForEach(t[symbolAsyncIterator](),o):t.constructor==Object?objectForEach(t,o):t};export default forEach;
