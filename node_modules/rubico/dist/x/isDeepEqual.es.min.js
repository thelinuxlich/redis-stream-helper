/**
 * rubico v1.8.1
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2021 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
const isArray=Array.isArray,objectKeysLength=e=>{let r=0;for(const t in e)r+=1;return r},symbolIterator=Symbol.iterator,sameValueZero=function(e,r){return e===r||e!=e&&r!=r},areIteratorsDeepEqual=function(e,r){let t=e.next(),n=r.next();if(t.done!=n.done)return!1;for(;!t.done;){if(!isDeepEqual(t.value,n.value))return!1;t=e.next(),n=r.next()}return n.done},areObjectsDeepEqual=function(e,r){if(objectKeysLength(e)!=objectKeysLength(r))return!1;for(const t in e)if(!isDeepEqual(e[t],r[t]))return!1;return!0},areArraysDeepEqual=function(e,r){const t=e.length;if(r.length!=t)return!1;let n=-1;for(;++n<t;)if(!isDeepEqual(e[n],r[n]))return!1;return!0},isDeepEqual=function(e,r){const t=isArray(e),n=isArray(r);if(t||n)return t&&n&&areArraysDeepEqual(e,r);if(null==e||null==r)return sameValueZero(e,r);const o="string"==typeof e||e.constructor==String,u="string"==typeof r||r.constructor==String;if(o||u)return sameValueZero(e,r);const a="function"==typeof e[symbolIterator],s="function"==typeof r[symbolIterator];if(a||s)return a&&s&&areIteratorsDeepEqual(e[symbolIterator](),r[symbolIterator]());const i=e.constructor==Object,l=r.constructor==Object;return i||l?i&&l&&areObjectsDeepEqual(e,r):sameValueZero(e,r)};export default isDeepEqual;
