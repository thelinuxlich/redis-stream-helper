/**
 * rubico v1.8.1
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2021 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
const noop=function(){},isPromise=n=>null!=n&&"function"==typeof n.then,funcConcat=(n,t)=>function(...o){const e=n(...o);return null!=(c=e)&&"function"==typeof c.then?e.then(t):t(e);var c},funcConcatSync=(n,t)=>function(...o){return t(n(...o))},objectProto=Object.prototype,nativeObjectToString=objectProto.toString,objectToString=n=>nativeObjectToString.call(n),generatorFunctionTag="[object GeneratorFunction]",isGeneratorFunction=n=>objectToString(n)==generatorFunctionTag,asyncGeneratorFunctionTag="[object AsyncGeneratorFunction]",isAsyncGeneratorFunction=n=>objectToString(n)==asyncGeneratorFunctionTag,pipe=function(n){let t=noop,o=noop;return function(...e){const c=e[0];return"function"!=typeof c||objectToString(c)==generatorFunctionTag||isAsyncGeneratorFunction(c)?(t==noop&&(t=n.reduce(funcConcat)),t(...e)):(o==noop&&(o=n.reduceRight(funcConcat)),o(...e))}},pipeSync=n=>n.reduce(funcConcatSync);pipe.sync=pipeSync;export default pipe;
